import numpy as np
X = np.array(([2, 9], [1, 5], [3, 6]))
y = np.array(([92], [86], [89]))
y = y / 100
def sigmoid(x):
    return 1 / (1 + np.exp(-x))
def derivatives_sigmoid(x):
    return x * (1 - x)
epoch = 10000
lr = 0.1
inputlayer_neurons = 2
hiddenlayer_neurons = 3
output_neurons = 1
wh = np.random.uniform(size=(inputlayer_neurons, hiddenlayer_neurons))
bh = np.random.uniform(size=(1, hiddenlayer_neurons))
wout = np.random.uniform(size=(hiddenlayer_neurons, output_neurons))
bout = np.random.uniform(size=(1, output_neurons))
for i in range(epoch):
    hidden_input = np.dot(X, wh) + bh
    hidden_output = sigmoid(hidden_input)
    final_input = np.dot(hidden_output, wout) + bout
    output = sigmoid(final_input)
    error = y - output
    d_output = error * derivatives_sigmoid(output)
    hidden_error = d_output.dot(wout.T)
    d_hidden_layer = hidden_error * derivatives_sigmoid(hidden_output)
    wout += hidden_output.T.dot(d_output) * lr
    bout += np.sum(d_output, axis=0, keepdims=True) * lr
    wh += X.T.dot(d_hidden_layer) * lr
    bh += np.sum(d_hidden_layer, axis=0, keepdims=True) * lr
print("Input: \n", X)
print("Actual Output: \n", y)
print("Predicted Output: \n", output)
